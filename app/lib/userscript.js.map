{
  "version": 3,
  "file": "userscript.js",
  "sources": [
    "/app/lib/userscript.js"
  ],
  "sourcesContent": [
    "/**\n * Logs to the console. Shortcut for console.log.\n * @param {...any} args - Arguments to log to the console.\n */\nexport const p = console.log.bind(console);\n/**\n * Creates an HTML element or invokes a custom component function.\n * @template {keyof HTMLElementTagNameMap | ((attrs: any) => HTMLElement)} T\n * @param {T} tag - The HTML tag name or a function that returns an element.\n * @param {Partial<T extends keyof HTMLElementTagNameMap ? HTMLElementTagNameMap[T] : HTMLElement> | Record<string, any>} [attributes={}] - Attributes to set on the element.\n * @param {...(HTMLElement|string)} children - Child elements or text nodes.\n * @returns {T extends keyof HTMLElementTagNameMap ? HTMLElementTagNameMap[T] : HTMLElement} The created element.\n */\nexport const h = (tag, attributes = {}, ...children) => {\n\t/** @type {T extends keyof HTMLElementTagNameMap ? HTMLElementTagNameMap[T] : HTMLElement} */\n\tconst el = typeof tag == \"function\" ? tag(attributes) : Object.assign(document.createElement(tag), attributes);\n\tel.append(...children);\n\treturn el;\n};\n/**\n * Creates a promise that resolves after a specified duration.\n * @param {number} ms - The duration in milliseconds to sleep.\n * @returns {Promise<void>} A promise that resolves after the specified duration.\n */\nexport const sleep = (ms) => new Promise((resolve) => setTimeout(resolve, ms));\n/**\n * Creates a debounced version of a function that delays its execution.\n * @template {(...args: any[]) => any} F\n * @param {F} fn - The function to debounce.\n * @param {number} ms - The debounce delay in milliseconds.\n * @returns {(...args: Parameters<F>) => void} The debounced function.\n */\nexport const debounce = (fn, ms) => {\n\t/**\n\t * @type {string | number | NodeJS.Timeout | undefined}\n\t */\n\tlet timeout;\n\treturn function (...args) {\n\t\tclearTimeout(timeout);\n\t\ttimeout = setTimeout(() => fn.apply(this, args), ms);\n\t};\n};\n/**\n * Executes a callback function when the DOM content is loaded.\n * @param {Function} fn - The callback function to execute when DOM content is loaded\n */\nexport const onDomContentLoaded = (fn) => {\n\tif (document.readyState === \"loading\") {\n\t\tdocument.addEventListener(\"DOMContentLoaded\", fn);\n\t} else {\n\t\tfn();\n\t}\n};\n/**\n * Selects the first element matching the given CSS selector.\n * @param {string} selector - A CSS selector string.\n * @returns {Element | null} The first matching element, or null if none found.\n */\nexport const $ = document.querySelector.bind(document);\n/**\n * Selects all elements matching the given CSS selector.\n * @param {string} selector - A CSS selector string.\n * @returns {NodeListOf<Element>} A live NodeList of matching elements.\n */\nexport const $$ = document.querySelectorAll.bind(document);\n"
  ],
  "names": [],
  "mappings": "AAIY,MAAC,IAAI,QAAQ,IAAI,KAAK,OAAO;AAS7B,MAAC,IAAI,CAAC,KAAK,aAAa,CAAE,MAAK,aAAa;AAEvD,QAAM,KAAK,OAAO,OAAO,aAAa,IAAI,UAAU,IAAI,OAAO,OAAO,SAAS,cAAc,GAAG,GAAG,UAAU;AAC7G,KAAG,OAAO,GAAG,QAAQ;AACrB,SAAO;AACR;AAMY,MAAC,QAAQ,CAAC,OAAO,IAAI,QAAQ,CAAC,YAAY,WAAW,SAAS,EAAE,CAAC;AAQjE,MAAC,WAAW,CAAC,IAAI,OAAO;AAInC,MAAI;AACJ,SAAO,YAAa,MAAM;AACzB,iBAAa,OAAO;AACpB,cAAU,WAAW,MAAM,GAAG,MAAM,MAAM,IAAI,GAAG,EAAE;AAAA,EACnD;AACF;AAKY,MAAC,qBAAqB,CAAC,OAAO;AACzC,MAAI,SAAS,eAAe,WAAW;AACtC,aAAS,iBAAiB,oBAAoB,EAAE;AAAA,EAClD,OAAQ;AACN,OAAI;AAAA,EACN;AACA;AAMY,MAAC,IAAI,SAAS,cAAc,KAAK,QAAQ;AAMzC,MAAC,KAAK,SAAS,iBAAiB,KAAK,QAAQ;"
}